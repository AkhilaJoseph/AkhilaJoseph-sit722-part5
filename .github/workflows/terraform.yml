name: Terraform Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Deploy to AKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    # Set up Terraform CLI
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    # Install Azure CLI and log in
    - name: Azure CLI Login
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az login --service-principal \
            --username ${{ secrets.ARM_CLIENT_ID }} \
            --password ${{ secrets.ARM_CLIENT_SECRET }} \
            --tenant ${{ secrets.ARM_TENANT_ID }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: ./9.2D-resources/Terraform

    # Terraform Plan
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./9.2D-resources/Terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./9.2D-resources/Terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Make the build and push scripts executable
    - name: Make scripts executable
      run: |
        chmod +x ./9.2D-resources/part4/scripts/build-image.sh
        chmod +x ./9.2D-resources/part4/scripts/push-image.sh
        chmod +x ./9.2D-resources/part4/scripts/deploy.sh
        chmod +x ./9.2D-resources/part4/scripts/delete.sh

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Install Docker Compose
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Build Docker Images using build-image.sh script
    - name: Build Docker images
      run: ./9.2D-resources/part4/scripts/build-image.sh

    # Login to Azure Container Registry
    - name: Azure ACR Login
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login myacrregistry123.azurecr.io --username ${{ secrets.ACR_USERNAME }} --password-stdin
        
     # Verify images have been built
    - name: List Docker images
      run: docker images | grep myacrregistry123.azurecr.io
      
    # Push Docker Images to ACR using push-image.sh script
    - name: Push Docker images
      run: ./9.2D-resources/part4/scripts/push-image.sh

    # Attach ACR to AKS
    - name: Attach ACR to AKS
      run: az aks update -n <aks-cluster-name> -g my-aks-rg --attach-acr myacrregistry123
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Apply Kubernetes Manifest
    - name: Deploy Docker images
      run: |
        ./9.2D-resources/part4/scripts/deploy.sh
      env:
        KUBECONFIG: ${{ steps.terraform.outputs.kube_config }}
